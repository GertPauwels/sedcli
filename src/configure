#!/bin/bash

#
# Copyright (C) 2018-2019, 2022-2023 Solidigm. All Rights Reserved.
#
# SPDX-License-Identifier: GPL-2.0-or-later
#

TMP_SRC="`mktemp`.c"
TMP_BIN="`mktemp`"

CONFIG_LOG="config.log"
CONFIG_MK="config.mk"
CONFIG_H="config.h"

cc=gcc

rm -fr ${CONFIG_LOG} ${CONFIG_MK} ${CONFIG_H}
touch ${CONFIG_LOG}

touch ${CONFIG_H}
touch ${CONFIG_MK}

function app_config_mk() {
    echo "${1}" >> ${CONFIG_MK}
}

function app_config_h() {
    echo "$1" >> ${CONFIG_H}
}

function print_status() {
    printf "%-30s%s\n" "$1" "$2"
}

function test_compile() {
    echo "Compiling test case $1" >> config.log

    if [ "$4" != "" ]; then
        src=$4
    else
        src=$TMP_SRC
    fi

    $cc $2 $3 -o $TMP_BIN $src >> config.log 2>&1 || return $?
}

function generate_version() {
    SEDCLI_KMIP_VERSION="1.1"
    echo "#define SEDCLI_KMIP_VERSION (\"${SEDCLI_KMIP_VERSION}\")" >> ${CONFIG_H}

    SEDCLI_VERSION="1.1"
    echo "#define SEDCLI_VERSION (\"${SEDCLI_VERSION}\")" >> ${CONFIG_H}
}

function common_def() {
    app_config_h "#define _GNU_SOURCE"
    app_config_h "#define __CHECK_ENDIAN__"
}

function common_mk() {
    app_config_mk "INCLUDES=./lib/include"
    app_config_mk "CFLAGS+=-include ${CONFIG_H}"
    # Fixes some errors in newer GCC versions
    app_config_mk "CFLAGS+=-fcommon"

    app_config_mk "CFLAGS+=-g -std=c17"
    if [ "${sedcli_logging}" == "yes" ]; then
        # asan, ubsan
        app_config_mk "CFLAGS+=-fstack-protector-all"
    fi

    app_config_mk "LDFLAGS+=-L."
    # Fixes some errors in newer GCC versions
    app_config_mk "LDFLAGS+=-fcommon"
    if [ -f /etc/lsb-release ] && [ -n "`cat /etc/lsb-release | grep -i ubuntu`" ]; then
        app_config_mk "LIB_DIR=/lib/x86_64-linux-gnu"
    else
        app_config_mk "LIB_DIR=/usr/lib64"
    fi

    if [ "${sedcli_logging}" == "yes" ]; then
        # asan, ubsan
        app_config_mk "LDFLAGS+=-fsanitize=address -fsanitize=undefined"
        app_config_mk "CFLAGS+=-fsanitize=address -fsanitize=undefined"

        # enable all warnings
        app_config_mk "CFLAGS+=-Wall -Werror -Wextra"

        # debug info
        app_config_mk "CFLAGS+=-O0"
    else
        app_config_mk "CFLAGS+=-O2"
    fi
}

function print_help() {
    echo "Configures sedcli/sedcli-kmip build procedure."
    echo "Options:"
    echo "    --enable-logging    Turns on debug logging to stdout."
    echo "    --offline           Do not update kmip submodule."
}

function print_summary() {
    echo ""
    echo "Configuration written to: ${CONFIG_MK} ${CONFIG_H}"
    echo "See more details in ${CONFIG_LOG}"
}

# Default settings
sedcli_logging="no"
offline="no"

# Process user specified options
for option do
    case "$option" in
    --enable-logging) sedcli_logging="yes"
    ;;
    --offline) offline="yes"
    ;;
    --help)
    print_help
    exit 0
    ;;
    *)
    echo "Wrong option: ${option}"
    esac
done

# Common and basic stuff
app_config_mk "CC=gcc"
generate_version
common_def
common_mk

# Handle library logging
if [ "${sedcli_logging}" == "yes" ]; then
    app_config_h "#define SEDCLI_DEBUG_LOGGING"
fi
print_status "Debug logging" ${sedcli_logging}
# ==========================================
# Handle kmip
ret_code=$?
print_status "Offline" ${offline}
if [ "${offline}" == "no" ]; then
    print_status "  update repository start"
    # Clone libkmip repo
    pushd . > /dev/null
    cd ../
    git submodule deinit --quiet --all --force
    git submodule update --quiet --init
    git submodule update --quiet --remote
    print_status "  updating repository done"
    print_status "  libkmip local install start"
    cd src/libkmip
    make all > /dev/null
    make PREFIX=local install > /dev/null
    print_status "  libkmip local install done"
    cd ..
    cp ./libkmip/local/lib/libkmip.a* ./
    ret_code=$?
    popd > /dev/null
fi
cat > $TMP_SRC <<EOF

#include <stdio.h>
#include <openssl/opensslv.h>

int main(int argc, char **argv)
{
    printf("%s\n", OPENSSL_VERSION_TEXT);

    return 0;
}
EOF

if [ "${ret_code}" -eq "0" ] && \
    test_compile "openssl" "" "-lcrypto -lssl"; then
    openssl_ver="`${TMP_BIN}`"
    print_status "KMIP support" "yes (detected ${openssl_ver})"
    app_config_mk "CONFIG_KMIP=y"
    app_config_mk "INCLUDES+=./libkmip/local/include"
    app_config_mk "LDFLAGS_KMIP+=-lkmip -lcrypto -lssl"
else
    print_status "KMIP support" "no"
fi

# ==========================================

print_summary

# Cleanup
rm -fr ${TMP_SRC} ${TMP_BIN}
